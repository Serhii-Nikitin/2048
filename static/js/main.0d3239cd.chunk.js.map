{"version":3,"sources":["GameBoard/GameBoard.jsx","App.jsx","index.jsx"],"names":["GameBoard","cells","map","cell","i","className","initialArray","Array","rows","fill","App","useState","score","setScore","setCells","isGameStarted","setIsGameStarted","isWin","setIsWin","isLose","setIsLose","randomIndex","Math","floor","random","length","getStart","firstRandom","secondRandom","current","index","getNumber","handleButton","sort","addNewNumber","array","item","console","log","tabIndex","onKeyUp","e","key","newBoard","column","filtredColumn","filter","currentIndex","emptyCells","newColumn","concat","isBoardChange","every","isDuplicates","some","includes","moveTop","filtredRow","newRow","moveLeft","reverse","moveRight","moveBottom","type","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0d3239cd.chunk.js","sourcesContent":["import React from 'react';\n\nexport const GameBoard = ({ cells }) => {\n  return (\n    <>\n      {cells.map((cell, i) => (\n        <div\n          className={cell\n            ? `field-cell field-cell--${cell}`\n            : 'field-cell'\n          }\n          key={i}\n        >\n          {cell\n            ? cell\n            : ''\n          }\n        </div>\n      ))}\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { GameBoard } from './GameBoard';\n\nconst rows = 4;\nconst columns = 4;\nconst initialArray = Array(rows * columns).fill(0);\n\nexport const App = () => {\n  const [score, setScore] = useState(0);\n  const [cells, setCells] = useState(initialArray);\n  const [isGameStarted, setIsGameStarted] = useState(false);\n  const [isWin, setIsWin] = useState(false);\n  const [isLose, setIsLose] = useState(false);\n\n  //функция для генерации рандомного индекса\n  const randomIndex = () => Math.floor(Math.random() * cells.length);\n\n  // функция для начала игры\n  const getStart = () => {\n    const firstRandom = randomIndex();\n    const secondRandom = randomIndex();\n\n    if (firstRandom !== secondRandom) {\n      setCells(current => current\n        .map((cell, index) => (\n          index === firstRandom || index === secondRandom\n            ? getNumber()\n            : cell\n        ))\n      )\n      setIsGameStarted(true);\n      setIsWin(false)\n      setIsLose(false)\n      setScore(0)\n    } else {\n      getStart();\n    }\n  }\n\n  // функция для кнопки старт\n  const handleButton = () => {\n    if (isGameStarted) {\n      setCells(initialArray);\n    } \n    \n    getStart();\n  }\n\n  // функция для генерации числа 2 или 4\n  function getNumber() {\n    const possibleNumbers = [2, 4].sort(() => Math.random() - 0.5);\n\n    return possibleNumbers[0];\n  }\n\n  //функция для добавления нового числа\n  const addNewNumber = (array) => {\n    const random = randomIndex();\n\n    if (array[random] === 0) {\n      setCells(array.map((item, index) => index === random\n        ? getNumber()\n        : item\n      ))\n    } else {\n      addNewNumber(array);\n    }\n  }\n\n\n  // функции для движения ячеек влево\n  const moveLeft = () => {\n    let newBoard = [];\n    for (let i = 0; i < cells.length - 1; i++) {\n      if (i % 4 === 0) {\n        const row = [cells[i], cells[i + 1], cells[i + 2], cells[i + 3]]\n        let filtredRow = row.filter(cell => cell);\n        let currentIndex;\n        filtredRow = filtredRow\n          .map((cell, index, array) => {\n            if (index === currentIndex) {\n              cell = 0;\n              currentIndex = null;\n            } else if (cell === array[index + 1]) {\n              cell *= 2;\n              setScore(current => current + cell);\n              currentIndex = (index + 1);\n            }\n\n            return cell;\n          })\n          .filter(cell => cell)\n\n        const emptyCells = Array(columns - filtredRow.length).fill(0);\n        const newRow = filtredRow.concat(emptyCells);\n\n        newBoard = newBoard.concat(newRow)\n      }\n    }\n\n    const isBoardChange = newBoard.every((item, index) => item === cells[index]);\n    const isDuplicates = newBoard.some((cell, index, array) => {\n      if (cell === array[index + columns] && cell !== 0) {\n        return true;\n      }\n    })\n\n    if (newBoard.includes(2048)) {\n      setIsWin(true);\n      setCells(newBoard);\n    } else if (!newBoard.includes(0) && !isDuplicates) {\n      setIsLose(true);\n      setCells(newBoard);\n    } else if (!isBoardChange) {\n      addNewNumber(newBoard)\n    }\n  }\n\n\n  // функции для движения ячеек вправо\n  const moveRight = () => {\n    let newBoard = [];\n    for (let i = 0; i < cells.length - 1; i++) {\n      if (i % 4 === 0) {\n        const row = [cells[i], cells[i + 1], cells[i + 2], cells[i + 3]]\n        let filtredRow = row.filter(cell => cell);\n        let currentIndex;\n        filtredRow = filtredRow\n          .reverse()\n          .map((cell, index, array) => {\n            if (index === currentIndex) {\n              cell *= 2;\n              setScore(current => current + cell);\n              currentIndex = null;\n            } else if (cell === array[index + 1]) {\n              cell = 0;\n              currentIndex = (index + 1);\n            }\n\n            return cell;\n          })\n          .filter(cell => cell)\n          .reverse()\n\n        const emptyCells = Array(columns - filtredRow.length).fill(0);\n        const newRow = emptyCells.concat(filtredRow);\n\n        newBoard = newBoard.concat(newRow)\n      }\n    }\n\n    const isBoardChange = newBoard.every((item, index) => item === cells[index]);\n    const isDuplicates = newBoard.some((cell, index, array) => {\n      if (cell === array[index + columns] && cell !== 0) {\n        return true;\n      }\n    })\n\n\n    if (newBoard.includes(2048)) {\n      setIsWin(true);\n      setCells(newBoard);\n    } else if (!newBoard.includes(0) && !isDuplicates) {\n      setIsLose(true);\n      setCells(newBoard);\n    } else if (!isBoardChange) {\n      addNewNumber(newBoard)\n    }\n  }\n\n  // функции для движения ячеек вверх\n  const moveTop = () => {\n    let newBoard = [];\n    for (let i = 0; i < rows; i++) {\n      const column = [\n        cells[i],\n        cells[i + rows],\n        cells[i + rows * 2],\n        cells[i + rows * 3]\n      ]\n\n      console.log(column);\n\n      let filtredColumn = column.filter(cell => cell);\n\n      let currentIndex;\n      filtredColumn = filtredColumn\n        .map((cell, index, array) => {\n          if (cell === 2048) {\n            setIsWin(true)\n          } else if (index === currentIndex) {\n            cell = 0;\n            currentIndex = null;\n          } else if (cell === array[index + 1]) {\n            cell *= 2;\n            setScore(current => current + cell);\n            currentIndex = (index + 1);\n          }\n\n          return cell;\n        })\n        .filter(cell => cell)\n\n      const emptyCells = Array(rows - filtredColumn.length).fill(0);\n      const newColumn = filtredColumn.concat(emptyCells);\n\n      newBoard[i] = newColumn[0];\n      newBoard[i + rows] = newColumn[1];\n      newBoard[i + rows * 2] = newColumn[2];\n      newBoard[i + rows * 3] = newColumn[3];\n    }\n    const isBoardChange = newBoard.every((item, index) => item === cells[index]);\n    const isDuplicates = newBoard.some((cell, index, array) => {\n      if (cell === array[index + rows] && cell !== 0) {\n        return true;\n      }\n    })\n\n    if (newBoard.includes(2048)) {\n      setIsWin(true);\n      setCells(newBoard);\n    } else if (!newBoard.includes(0) && !isDuplicates) {\n      setIsLose(true);\n      setCells(newBoard);\n    } else if (!isBoardChange) {\n      addNewNumber(newBoard)\n    }\n  }\n\n  // функции для движения ячеек вниз\n  const moveBottom = () => {\n    let newBoard = [];\n    for (let i = 0; i < rows; i++) {\n      const column = [\n        cells[i],\n        cells[i + rows],\n        cells[i + rows * 2],\n        cells[i + rows * 3]\n      ]\n\n      console.log(column);\n\n      let filtredColumn = column.filter(cell => cell);\n\n      let currentIndex;\n      filtredColumn = filtredColumn\n        .reverse()\n        .map((cell, index, array) => {\n          if (cell === 2048) {\n            setIsWin(true)\n          } else if (index === currentIndex) {\n            cell *= 2;\n            setScore(current => current + cell);\n            currentIndex = null;\n          } else if (cell === array[index + 1]) {\n            cell = 0;\n            currentIndex = (index + 1);\n          }\n\n          return cell;\n        })\n        .filter(cell => cell)\n        .reverse()\n\n      console.log(filtredColumn);\n      const emptyCells = Array(rows - filtredColumn.length).fill(0);\n      const newColumn = emptyCells.concat(filtredColumn);\n\n      newBoard[i] = newColumn[0];\n      newBoard[i + rows] = newColumn[1];\n      newBoard[i + rows * 2] = newColumn[2];\n      newBoard[i + rows * 3] = newColumn[3];\n    }\n\n    const isBoardChange = newBoard.every((item, index) => item === cells[index]);\n    const isDuplicates = newBoard.some((cell, index, array) => {\n      if (cell === array[index + rows] && cell !== 0) {\n        return true;\n      }\n    })\n\n    if (newBoard.includes(2048)) {\n      setIsWin(true);\n      setCells(newBoard);\n    } else if (!newBoard.includes(0) && !isDuplicates) {\n      setIsLose(true);\n      setCells(newBoard);\n    } else if (!isBoardChange) {\n      addNewNumber(newBoard)\n    }\n  }\n\n  console.log('render');\n\n  return (\n    <div\n      className=\"page-container\"\n      tabIndex={1}\n      onKeyUp={(e) => {\n        if (e.key === 'ArrowUp' && !isWin && !isLose) {\n          moveTop();\n        }\n\n        if (e.key === 'ArrowLeft' && !isWin && !isLose) {\n          moveLeft();\n        }\n\n        if (e.key === 'ArrowRight' && !isWin && !isLose) {\n          moveRight();\n        }\n\n        if (e.key === 'ArrowDown' && !isWin && !isLose) {\n          moveBottom();\n        }\n        console.log(e);\n      }}\n    >\n      <div className=\"container\">\n        <div className=\"game-header\">\n          <h1>2048</h1>\n          <div className=\"controls\">\n            <p className=\"info\">\n              {`Score: `}\n              <span className=\"game-score\">{score}</span>\n            </p>\n            <button\n              type=\"button\"\n              className=\"button start\"\n              onClick={() => handleButton()}\n            >\n              {isGameStarted\n                ? 'Restart'\n                : 'Start'\n              }\n            </button>\n          </div>\n        </div>\n\n        <div className=\"game-field\" onKeyUp={() => console.log('hi')}>\n          <GameBoard cells={cells}/>\n        </div>\n\n        <div className=\"message-container\">\n          {isLose && (\n            <p className=\"message message-lose\">\n              You lose! Restart the game?\n            </p>\n          )}\n          {isWin && (\n            <p className=\"message message-win\">\n              Winner! Congrats! You did it!\n            </p>\n          )}\n          {!isGameStarted && (\n            <p className=\"message message-start\">\n              Press \"Start\" to begin game. Good luck!\n            </p>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}