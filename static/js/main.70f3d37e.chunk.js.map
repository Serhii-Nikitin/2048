{"version":3,"sources":["GameBoard/GameBoard.jsx","App.jsx","index.jsx"],"names":["GameBoard","cells","map","cell","className","uuidv4","initialArray","Array","rowsCount","fill","App","useState","score","setScore","setCells","isGameStarted","setIsGameStarted","isWin","setIsWin","isLose","setIsLose","randomIndex","Math","floor","random","length","getStart","firstRandomIndex","secondRandomIndex","current","index","getRandomNumber","handleStart","sort","addNewNumber","cellsList","position","newArray","item","rowsFilter","row","currentIndex","array","newCell","filter","columnsFilter","column","moveCells","keyName","newBoard","i","filteredRow","emptyCells","newRow","concat","reverse","filteredColumn","newColumn","firstCell","secondCell","thirdCell","fourCell","isBoardChange","every","isDuplicates","some","includes","role","tabIndex","onKeyUp","e","key","type","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.70f3d37e.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { v4 as uuidv4 } from 'uuid';\nimport './GameBoard.scss';\n\nexport const GameBoard = ({ cells }) => (\n  <>\n    {cells.map(cell => (\n      <div\n        className={cell\n          ? `field-cell field-cell--${cell}`\n          : 'field-cell'\n        }\n        key={uuidv4()}\n      >\n        {cell || ''}\n      </div>\n    ))}\n  </>\n);\n\nGameBoard.propTypes = {\n  cells: PropTypes.arrayOf(\n    PropTypes.number.isRequired,\n  ).isRequired,\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { GameBoard } from './GameBoard';\n\nconst rowsCount = 4;\nconst columnsCount = 4;\nconst initialArray = Array(rowsCount * columnsCount).fill(0);\n\nexport const App = () => {\n  const [score, setScore] = useState(0);\n  const [cells, setCells] = useState(initialArray);\n  const [isGameStarted, setIsGameStarted] = useState(false);\n  const [isWin, setIsWin] = useState(false);\n  const [isLose, setIsLose] = useState(false);\n\n  const randomIndex = () => Math.floor(Math.random() * cells.length);\n\n  const getStart = () => {\n    const firstRandomIndex = randomIndex();\n    const secondRandomIndex = randomIndex();\n\n    if (firstRandomIndex !== secondRandomIndex) {\n      setCells(current => (current\n        .map((cell, index) => (\n          index === firstRandomIndex || index === secondRandomIndex\n            ? getRandomNumber()\n            : cell\n        ))\n      ));\n      setIsGameStarted(true);\n      setIsWin(false);\n      setIsLose(false);\n      setScore(0);\n    } else {\n      getStart();\n    }\n  };\n\n  const handleStart = () => {\n    setCells(initialArray);\n    getStart();\n  };\n\n  function getRandomNumber() {\n    const possibleNumbers = [2, 4].sort(() => Math.random() - 0.5);\n\n    return possibleNumbers[0];\n  }\n\n  const addNewNumber = (cellsList) => {\n    const position = randomIndex();\n\n    if (cellsList[position] === 0) {\n      const newArray = cellsList.map((item, index) => (index === position\n        ? getRandomNumber()\n        : item\n      ));\n\n      setCells(newArray);\n    } else {\n      addNewNumber(cellsList);\n    }\n  };\n\n  const rowsFilter = (row) => {\n    let currentIndex;\n\n    return row\n      .map((cell, index, array) => {\n        let newCell = cell;\n\n        if (index === currentIndex) {\n          newCell = 0;\n          currentIndex = null;\n        } else if (cell === array[index + 1]) {\n          newCell *= 2;\n          setScore(current => current + newCell);\n          currentIndex = (index + 1);\n        }\n\n        return newCell;\n      })\n      .filter(cell => cell);\n  };\n\n  const columnsFilter = (column) => {\n    let currentIndex;\n\n    return column\n      .map((cell, index, array) => {\n        let newCell = cell;\n\n        if (cell === 2048) {\n          setIsWin(true);\n        } else if (index === currentIndex) {\n          newCell = 0;\n          currentIndex = null;\n        } else if (cell === array[index + 1]) {\n          newCell *= 2;\n          setScore(current => current + newCell);\n          currentIndex = (index + 1);\n        }\n\n        return newCell;\n      })\n      .filter(cell => cell);\n  };\n\n  const moveCells = (keyName) => {\n    let newBoard = [];\n\n    switch (keyName) {\n      case 'ArrowLeft':\n        for (let i = 0; i < cells.length - 1; i += 1) {\n          if (i % 4 === 0) {\n            const row = [cells[i], cells[i + 1], cells[i + 2], cells[i + 3]];\n            let filteredRow = row.filter(cell => cell);\n\n            filteredRow = rowsFilter(filteredRow);\n\n            const emptyCells = Array(columnsCount - filteredRow.length).fill(0);\n            const newRow = filteredRow.concat(emptyCells);\n\n            newBoard = newBoard.concat(newRow);\n          }\n        }\n\n        break;\n\n      case 'ArrowRight':\n        for (let i = 0; i < cells.length - 1; i += 1) {\n          if (i % 4 === 0) {\n            const row = [cells[i], cells[i + 1], cells[i + 2], cells[i + 3]];\n            let filteredRow = row.filter(cell => cell).reverse();\n\n            filteredRow = rowsFilter(filteredRow).reverse();\n\n            const emptyCells = Array(columnsCount - filteredRow.length).fill(0);\n            const newRow = emptyCells.concat(filteredRow);\n\n            newBoard = newBoard.concat(newRow);\n          }\n        }\n\n        break;\n\n      case 'ArrowUp':\n        for (let i = 0; i < rowsCount; i += 1) {\n          const column = [\n            cells[i],\n            cells[i + rowsCount],\n            cells[i + rowsCount * 2],\n            cells[i + rowsCount * 3],\n          ];\n\n          let filteredColumn = column.filter(cell => cell);\n\n          filteredColumn = columnsFilter(filteredColumn);\n\n          const emptyCells = Array(rowsCount - filteredColumn.length).fill(0);\n          const newColumn = filteredColumn.concat(emptyCells);\n          const [firstCell, secondCell, thirdCell, fourCell] = newColumn;\n\n          newBoard[i] = firstCell;\n          newBoard[i + rowsCount] = secondCell;\n          newBoard[i + rowsCount * 2] = thirdCell;\n          newBoard[i + rowsCount * 3] = fourCell;\n        }\n\n        break;\n\n      case 'ArrowDown':\n        for (let i = 0; i < rowsCount; i += 1) {\n          const column = [\n            cells[i],\n            cells[i + rowsCount],\n            cells[i + rowsCount * 2],\n            cells[i + rowsCount * 3],\n          ];\n\n          let filteredColumn = column.filter(cell => cell).reverse();\n\n          filteredColumn = columnsFilter(filteredColumn)\n            .reverse();\n\n          const emptyCells = Array(rowsCount - filteredColumn.length).fill(0);\n          const newColumn = emptyCells.concat(filteredColumn);\n\n          const [firstCell, secondCell, thirdCell, fourCell] = newColumn;\n\n          newBoard[i] = firstCell;\n          newBoard[i + rowsCount] = secondCell;\n          newBoard[i + rowsCount * 2] = thirdCell;\n          newBoard[i + rowsCount * 3] = fourCell;\n        }\n\n        break;\n\n      default:\n        break;\n    }\n\n    const isBoardChange = newBoard\n      .every((cell, index) => cell === cells[index]);\n\n    const isDuplicates = newBoard.some((cell, index, array) => {\n      if (cell === 0) {\n        return true;\n      }\n\n      if (cell === array[index + rowsCount]) {\n        return true;\n      }\n\n      if ((index % columnsCount) !== 3\n        && cell === array[index + 1]) {\n        return true;\n      }\n\n      return false;\n    });\n\n    if (newBoard.includes(2048)) {\n      setIsWin(true);\n      setCells(newBoard);\n    } else if (!isDuplicates) {\n      setIsLose(true);\n      setCells(newBoard);\n    } else if (!isBoardChange) {\n      addNewNumber(newBoard);\n    }\n  };\n\n  return (\n    <div\n      className=\"page-container\"\n      role=\"presentation\"\n      /* eslint-disable-next-line */\n      tabIndex={1}\n      onKeyUp={(e) => {\n        if (!isWin && !isLose) {\n          moveCells(e.key);\n        }\n      }}\n    >\n      <div className=\"container\">\n        <div className=\"game-header\">\n          <h1 className=\"title\">2048</h1>\n          <div className=\"controls\">\n            <p className=\"info\">\n              {`Score: `}\n              <span>{score}</span>\n            </p>\n            <button\n              type=\"button\"\n              className={isGameStarted\n                ? 'button restart'\n                : 'button start'\n              }\n              onClick={() => handleStart()}\n            >\n              {isGameStarted\n                ? 'Restart'\n                : 'Start'\n              }\n            </button>\n          </div>\n        </div>\n\n        <div className=\"game-field\">\n          <GameBoard cells={cells} />\n        </div>\n\n        <div className=\"message-container\">\n          {isLose && (\n            <p className=\"message\">\n              You lose! Restart the game?\n            </p>\n          )}\n          {isWin && (\n            <p className=\"message message-win\">\n              Winner! Congrats! You did it!\n            </p>\n          )}\n          {!isGameStarted && (\n            <p className=\"message\">\n              Press &quot;Start&quot; to begin game. Good luck!\n            </p>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}