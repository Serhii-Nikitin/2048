{"version":3,"sources":["GameBoard/GameBoard.jsx","App.jsx","index.jsx"],"names":["GameBoard","React","memo","cells","map","cell","className","uuidv4","propTypes","PropTypes","arrayOf","number","isRequired","initialArray","Array","rowsCount","fill","possibleNumbers","App","useState","score","setScore","setCells","isGameStarted","setIsGameStarted","isWin","setIsWin","isLose","setIsLose","randomIndex","useCallback","Math","floor","random","length","getStart","firstRandomIndex","secondRandomIndex","current","index","getRandomNumber","sort","addNewNumber","cellsList","position","newArray","item","rowsFilter","row","currentIndex","array","newCell","filter","columnsFilter","column","moveCells","keyName","newBoard","i","filteredRow","emptyCells","reverse","filteredColumn","newColumn","firstCell","secondCell","thirdCell","fourCell","isBoardChange","every","isDuplicates","some","includes","role","tabIndex","onKeyUp","e","key","type","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.783337e7.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { v4 as uuidv4 } from 'uuid';\nimport './GameBoard.scss';\n\nexport const GameBoard = React.memo(({ cells }) => (\n  <>\n    {cells.map(cell => (\n      <div\n        className={cell\n          ? `field-cell field-cell--${cell}`\n          : 'field-cell'\n        }\n        key={uuidv4()}\n      >\n        {cell || ''}\n      </div>\n    ))}\n  </>\n));\n\nGameBoard.propTypes = {\n  cells: PropTypes.arrayOf(\n    PropTypes.number.isRequired,\n  ).isRequired,\n};\n","import React, { useCallback, useState } from 'react';\nimport './App.scss';\nimport { GameBoard } from './GameBoard';\n\nconst rowsCount = 4;\nconst columnsCount = 4;\nconst initialArray = Array(rowsCount * columnsCount).fill(0);\nconst possibleNumbers = [2, 4];\n\nexport const App = () => {\n  const [score, setScore] = useState(0);\n  const [cells, setCells] = useState(initialArray);\n  const [isGameStarted, setIsGameStarted] = useState(false);\n  const [isWin, setIsWin] = useState(false);\n  const [isLose, setIsLose] = useState(false);\n\n  const randomIndex = useCallback(() => (\n    Math.floor(Math.random() * cells.length)\n  ), [cells]);\n\n  const getStart = useCallback(() => {\n    const firstRandomIndex = randomIndex();\n    const secondRandomIndex = randomIndex();\n\n    if (firstRandomIndex !== secondRandomIndex) {\n      setCells(current => (current\n        .map((cell, index) => (\n          index === firstRandomIndex || index === secondRandomIndex\n            ? getRandomNumber()\n            : cell\n        ))\n      ));\n      setIsGameStarted(true);\n      setIsWin(false);\n      setIsLose(false);\n      setScore(0);\n    } else {\n      getStart();\n    }\n  }, [randomIndex, getRandomNumber]);\n\n  const handleStart = () => {\n    setCells(initialArray);\n    getStart();\n  };\n\n  function getRandomNumber() {\n    const sortedNumbers = possibleNumbers.sort(() => Math.random() - 0.5);\n\n    return sortedNumbers[0];\n  }\n\n  const addNewNumber = (cellsList) => {\n    const position = randomIndex();\n\n    if (cellsList[position] === 0) {\n      const newArray = cellsList.map((item, index) => (index === position\n        ? getRandomNumber()\n        : item\n      ));\n\n      setCells(newArray);\n    } else {\n      addNewNumber(cellsList);\n    }\n  };\n\n  const rowsFilter = (row) => {\n    let currentIndex;\n\n    return row\n      .map((cell, index, array) => {\n        let newCell = cell;\n\n        if (index === currentIndex) {\n          newCell = 0;\n          currentIndex = null;\n        } else if (cell === array[index + 1]) {\n          newCell *= 2;\n          setScore(current => current + newCell);\n          currentIndex = (index + 1);\n        }\n\n        return newCell;\n      })\n      .filter(cell => cell);\n  };\n\n  const columnsFilter = (column) => {\n    let currentIndex;\n\n    return column\n      .map((cell, index, array) => {\n        let newCell = cell;\n\n        if (cell === 2048) {\n          setIsWin(true);\n        } else if (index === currentIndex) {\n          newCell = 0;\n          currentIndex = null;\n        } else if (cell === array[index + 1]) {\n          newCell *= 2;\n          setScore(current => current + newCell);\n          currentIndex = (index + 1);\n        }\n\n        return newCell;\n      })\n      .filter(cell => cell);\n  };\n\n  const moveCells = (keyName) => {\n    let newBoard = [];\n\n    switch (keyName) {\n      case 'ArrowLeft':\n        for (let i = 0; i < cells.length - 1; i += 1) {\n          if (i % 4 === 0) {\n            const row = [cells[i], cells[i + 1], cells[i + 2], cells[i + 3]];\n            let filteredRow = row.filter(cell => cell);\n\n            filteredRow = rowsFilter(filteredRow);\n\n            const emptyCells = Array(columnsCount - filteredRow.length).fill(0);\n\n            newBoard = [\n              ...newBoard,\n              ...filteredRow,\n              ...emptyCells,\n            ];\n          }\n        }\n\n        break;\n\n      case 'ArrowRight':\n        for (let i = 0; i < cells.length - 1; i += 1) {\n          if (i % 4 === 0) {\n            const row = [cells[i], cells[i + 1], cells[i + 2], cells[i + 3]];\n            let filteredRow = row.filter(cell => cell).reverse();\n\n            filteredRow = rowsFilter(filteredRow).reverse();\n\n            const emptyCells = Array(columnsCount - filteredRow.length).fill(0);\n\n            newBoard = [\n              ...newBoard,\n              ...emptyCells,\n              ...filteredRow,\n            ];\n          }\n        }\n\n        break;\n\n      case 'ArrowUp':\n        for (let i = 0; i < rowsCount; i += 1) {\n          const column = [\n            cells[i],\n            cells[i + rowsCount],\n            cells[i + rowsCount * 2],\n            cells[i + rowsCount * 3],\n          ];\n\n          let filteredColumn = column.filter(cell => cell);\n\n          filteredColumn = columnsFilter(filteredColumn);\n\n          const emptyCells = Array(rowsCount - filteredColumn.length).fill(0);\n          const newColumn = [\n            ...filteredColumn,\n            ...emptyCells,\n          ];\n          const [firstCell, secondCell, thirdCell, fourCell] = newColumn;\n\n          newBoard[i] = firstCell;\n          newBoard[i + rowsCount] = secondCell;\n          newBoard[i + rowsCount * 2] = thirdCell;\n          newBoard[i + rowsCount * 3] = fourCell;\n        }\n\n        break;\n\n      case 'ArrowDown':\n        for (let i = 0; i < rowsCount; i += 1) {\n          const column = [\n            cells[i],\n            cells[i + rowsCount],\n            cells[i + rowsCount * 2],\n            cells[i + rowsCount * 3],\n          ];\n\n          let filteredColumn = column.filter(cell => cell).reverse();\n\n          filteredColumn = columnsFilter(filteredColumn)\n            .reverse();\n\n          const emptyCells = Array(rowsCount - filteredColumn.length).fill(0);\n          const newColumn = [\n            ...emptyCells,\n            ...filteredColumn,\n          ];\n\n          const [firstCell, secondCell, thirdCell, fourCell] = newColumn;\n\n          newBoard[i] = firstCell;\n          newBoard[i + rowsCount] = secondCell;\n          newBoard[i + rowsCount * 2] = thirdCell;\n          newBoard[i + rowsCount * 3] = fourCell;\n        }\n\n        break;\n\n      default:\n        return;\n    }\n\n    const isBoardChange = newBoard\n      .every((cell, index) => cell === cells[index]);\n\n    const isDuplicates = newBoard.some((cell, index, array) => {\n      if (cell === 0) {\n        return true;\n      }\n\n      if (cell === array[index + rowsCount]) {\n        return true;\n      }\n\n      if ((index % columnsCount) !== 3\n        && cell === array[index + 1]) {\n        return true;\n      }\n\n      return false;\n    });\n\n    if (newBoard.includes(2048)) {\n      setIsWin(true);\n      setCells(newBoard);\n    } else if (!isDuplicates) {\n      setIsLose(true);\n      setCells(newBoard);\n    } else if (!isBoardChange) {\n      addNewNumber(newBoard);\n    }\n  };\n\n  return (\n    <div\n      className=\"page-container\"\n      role=\"presentation\"\n      /* eslint-disable-next-line */\n      tabIndex={1}\n      onKeyUp={(e) => {\n        if (!isWin && !isLose) {\n          moveCells(e.key);\n        }\n      }}\n    >\n      <div className=\"container\">\n        <div className=\"game-header\">\n          <h1 className=\"title\">2048</h1>\n          <div className=\"controls\">\n            <p className=\"info\">\n              {`Score: `}\n              <span>{score}</span>\n            </p>\n            <button\n              type=\"button\"\n              className={isGameStarted\n                ? 'button restart'\n                : 'button start'\n              }\n              onClick={handleStart}\n            >\n              {isGameStarted\n                ? 'Restart'\n                : 'Start'\n              }\n            </button>\n          </div>\n        </div>\n\n        <div className=\"game-field\">\n          <GameBoard cells={cells} />\n        </div>\n\n        <div className=\"message-container\">\n          {isLose && (\n            <p className=\"message\">\n              You lose! Restart the game?\n            </p>\n          )}\n          {isWin && (\n            <p className=\"message message-win\">\n              Winner! Congrats! You did it!\n            </p>\n          )}\n          {!isGameStarted && (\n            <p className=\"message\">\n              Press &quot;Start&quot; to begin game. Good luck!\n            </p>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}